// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.20;

import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";

import "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol";
import {ERC1967Utils} from "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol";

import {console} from "forge-std/console.sol";

import {BaseTest} from "../Base.t.sol";
import {USDai} from "src/USDai.sol";
import {StakedUSDai} from "src/StakedUSDai.sol";
import {USDaiQueuedDepositor} from "src/queuedDepositor/USDaiQueuedDepositor.sol";
import {ReceiptToken} from "src/queuedDepositor/ReceiptToken.sol";

import {IUSDaiQueuedDepositor} from "src/interfaces/IUSDaiQueuedDepositor.sol";

contract USDaiServiceQueuedDepositWithOneInchTest is BaseTest {
    IERC20 internal usdt = IERC20(0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9);
    USDaiQueuedDepositor internal queuedDepositor = USDaiQueuedDepositor(0x81cc0DEE5e599784CBB4862c605c7003B0aC5A53);

    address internal oneInchTarget = 0x1111111254EEB25477B68fb85Ed929f73A960582;
    /* 1inch execution data */
    /* https://dln.debridge.finance/v1.0/#/single%20chain%20swap/SingleSwapControllerV10_getChainTransaction */
    /* Token In: USDT */
    /* Token Out: wM */
    /* Amount: 6,000,000 USDT */
    bytes internal oneInchExecutionData =
        hex"12aa3caf000000000000000000000000de9e4fe32b049f821c7f3e9802381aa470ffca73000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000000000000000000000000437cc33344a0b27a429f795ff6b469c72698b291000000000000000000000000de9e4fe32b049f821c7f3e9802381aa470ffca7300000000000000000000000081cc0dee5e599784cbb4862c605c7003b0ac5a5300000000000000000000000000000000000000000000000000000574fbde6000000000000000000000000000000000000000000000000000000005750557821300000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bc5000000000000000000000000000000000000000000000ba7000b44000b2a00a0c9e75c4800002624090603020204000000000000000afc000a4c0009fd0009ae00061e0005cf0005800004904920a51afafe0263b40edaef0df8781ea9aa03e381a3fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb902e424856bcb0e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000020000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb900000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000375633d34c000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000000de9e4fe32b049f821c7f3e9802381aa470ffca73000000000000000000000000000000000000000000000000000000000000000051204c4af8dbc524681930a27b2f1af5bcc8062e6fb7fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb900447dc20382000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e583100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000001baa7d6c86000000000000000000000000de9e4fe32b049f821c7f3e9802381aa470ffca73000000000000000000000000910bf2d50fa5e014fd06666f456182d4ab7c8bd202a00000000000000000000000000000000000000000000000000000001bab6414c5ee63c1e500df63268af25a2a69c07d09a88336cd9424269a1ffd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb902a000000000000000000000000000000000000000000000000000000029806439bcee63c1e5007e928afb59f5de9d2f4d162f754c6eb40c88aa8efd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb900a007e5c0d200000000000000000000000000000000000000000000000000036c0000b05121000000000022d473030f116ddee9f6b43ac78ba3fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9004487517c45000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000000000000000000000000ad89051bed8d96f045e8912ae1672c6c0bf8a85e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004128ad89051bed8d96f045e8912ae1672c6c0bf8a85e0104286f580d00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000068bf4ec20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb90000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000052ffd4eba30000000000000000000000000000000000000000000000000000000000000003000000000000000000000000a6d12574efb239fc1d2099732bd8b5dc6306897f000000000000000000000000a6d12574efb239fc1d2099732bd8b5dc6306897f000000000000000000000000000000000000000000000000000000000000000100000000000000000000000019b001e6bc2d89154c18e2216eec5c8c6047b6d80000000000000000000000007f6501d3b98ee91f9b9535e4b0ac710fb0f9e0bc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000007f6501d3b98ee91f9b9535e4b0ac710fb0f9e0bc000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e58310000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000007c813df28cee63c1e500a17afcab059f3c6751f5b64347b5a503c3291868fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb902a0000000000000000000000000000000000000000000000000000001f202a261d6ee63c1e500be3ad6a5669dc0b8b12febc03608860c31e2eef6fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb951203c0441b42195f4ad6aa9a0978e06096ea616cda7fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb900242668dfaa000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020dae3bb39e000000000000000000000000de9e4fe32b049f821c7f3e9802381aa470ffca730020d6bdbf78af88d065e77c8cc2239327c5edb3a432268e583102a0000000000000000000000000000000000000000000000000000005673060c7c1ee63c1e580b50a1f651a5acb2679c8f679d782c728f3702e53af88d065e77c8cc2239327c5edb3a432268e58311111111254eeb25477b68fb85ed929f73a960582000000000000000000000000000000000000000000000000000000fef84ee9";

    function setUp() public override {
        super.setUp();

        vm.createSelectFork(vm.envString("ARBITRUM_RPC_URL"));
        vm.rollFork(375372496);

        usdai = USDai(0x0A1a1A107E45b7Ced86833863f482BC5f4ed82EF);
        stakedUsdai = StakedUSDai(0x0B2b2B2076d95dda7817e785989fE353fe955ef9);
        address oAdapterUSDai = 0xffA10065Ce1d1C42FABc46e06B84Ed8FfEb4baE5;
        address oAdapterStakedUSDai = 0xffB20098FD7B8E84762eea4609F299D101427f24;
        address receiptTokenImpl = address(new ReceiptToken());

        /* Lookup proxy admin */
        address proxyAdmin = address(uint160(uint256(vm.load(address(queuedDepositor), ERC1967Utils.ADMIN_SLOT))));

        vm.startPrank(0x783B08aA21DE056717173f72E04Be0E91328A07b);

        // Deploy USDai implemetation
        USDaiQueuedDepositor queuedDepositorImpl = new USDaiQueuedDepositor(
            address(usdai), address(stakedUsdai), oAdapterUSDai, oAdapterStakedUSDai, receiptTokenImpl
        );

        /* Upgrade Proxy */
        ProxyAdmin(proxyAdmin).upgradeAndCall(
            ITransparentUpgradeableProxy(address(queuedDepositor)), address(queuedDepositorImpl), ""
        );
        vm.stopPrank();

        /* Update deposit cap and supply cap */
        vm.startPrank(0x5F0BC72FB5952b2f3F2E11404398eD507B25841F);

        queuedDepositor.updateDepositCap(type(uint256).max, true);
        usdai.setSupplyCap(type(uint256).max);

        vm.stopPrank();
    }

    function test__USDaiServiceQueued_WithOneInchQuote_ForDeposit() public {
        address usdtHolder = 0x0b07f64ABc342B68AEc57c0936E4B6fD4452967E;

        vm.startPrank(usdtHolder);
        usdt.approve(address(queuedDepositor), 6_000_000 * 1e6);

        uint256 queueIndex = queuedDepositor.deposit(
            IUSDaiQueuedDepositor.QueueType.Deposit, address(usdt), 6_000_000 * 1e6, usdtHolder, 0
        );

        vm.stopPrank();

        bytes memory data = abi.encode(address(usdt), 6_000_000 * 1e6, oneInchTarget, oneInchExecutionData, 0, 0);

        vm.startPrank(0xe7E53F940F8242fec57CBE88054463d4944B3670);
        queuedDepositor.service(
            IUSDaiQueuedDepositor.QueueType.Deposit, abi.encode(IUSDaiQueuedDepositor.SwapType.Aggregator, data)
        );
        vm.stopPrank();

        assertGt(usdai.balanceOf(usdtHolder), 6_000_000 * 1e18);

        IUSDaiQueuedDepositor.QueueItem memory queueItem =
            queuedDepositor.queueItem(IUSDaiQueuedDepositor.QueueType.Deposit, address(usdt), queueIndex);
        assertEq(queueItem.pendingDeposit, 0);
        assertEq(queueItem.dstEid, 0);
        assertEq(queueItem.depositor, usdtHolder);
        assertEq(queueItem.recipient, usdtHolder);
    }

    function test__USDaiServiceQueued_WithOneInchQuote_ForDepositAndStake() public {
        address usdtHolder = 0x0b07f64ABc342B68AEc57c0936E4B6fD4452967E;

        vm.startPrank(usdtHolder);
        usdt.approve(address(queuedDepositor), 6_000_000 * 1e6);

        uint256 queueIndex = queuedDepositor.deposit(
            IUSDaiQueuedDepositor.QueueType.DepositAndStake, address(usdt), 6_000_000 * 1e6, usdtHolder, 0
        );

        vm.stopPrank();

        uint256 depositSharePrice = stakedUsdai.depositSharePrice() + 1;

        bytes memory data =
            abi.encode(address(usdt), 6_000_000 * 1e6, oneInchTarget, oneInchExecutionData, 0, depositSharePrice);

        vm.startPrank(0xe7E53F940F8242fec57CBE88054463d4944B3670);
        queuedDepositor.service(
            IUSDaiQueuedDepositor.QueueType.DepositAndStake, abi.encode(IUSDaiQueuedDepositor.SwapType.Aggregator, data)
        );
        vm.stopPrank();

        assertGt(stakedUsdai.balanceOf(usdtHolder), 6_000_000 * 1e18 * 1e18 / depositSharePrice);

        IUSDaiQueuedDepositor.QueueItem memory queueItem =
            queuedDepositor.queueItem(IUSDaiQueuedDepositor.QueueType.DepositAndStake, address(usdt), queueIndex);
        assertEq(queueItem.pendingDeposit, 0);
        assertEq(queueItem.dstEid, 0);
        assertEq(queueItem.depositor, usdtHolder);
        assertEq(queueItem.recipient, usdtHolder);
    }
}
